---
AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Security Hub Recurring Summary. Sends email notifications with a summary of the security findings.
  This template creates Security Hub Custom Insights, Lambda function for delivery, SNS Topic, and needed IAM roles.

Parameters:
  EmailAddress:
    Description: "Email Address for Subscriber to Security Hub summary."
    Type: String
    AllowedPattern: "^[^\s@]+@[^\s@]+\.[^\s@]+$"
    ConstraintDescription: "Must be a valid Email Address."
  RecurringScheduleCron:
    Description: >
      Cron expression for scheduling the Security Hub summary email. Default: Every Monday 8:00 AM GMT.
      Example: Every Friday 9:00 AM GMT: cron(0 9 ? * 6 *)
    Default: "cron(0 8 ? * 2 *)"
    Type: String
  S3BucketName:
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
    ConstraintDescription: >
      Bucket Name can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
    Description: "S3 Bucket where the zip file for Lambda function is stored."
    Type: String
  S3KeyName:
    ConstraintDescription: >
      Key Name can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).
    Description: "S3 key name (with prefix) of the zip file for Lambda function."
    Type: String
  AdditionalEmailFooterText:
    Description: "Additional text to append at the end of email message."
    Type: String

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Parameters"
        Parameters:
          - S3BucketName
          - S3KeyName
          - EmailAddress
          - RecurringScheduleCron
          - AdditionalEmailFooterText
    ParameterLabels:
      S3BucketName:
        default: "S3 Bucket Name:"
      S3KeyName:
        default: "S3 Key Name (with Prefix):"
      RecurringScheduleCron:
        default: "CloudWatch Cron Expression:"
      EmailAddress:
        default: "Email address:"
      AdditionalEmailFooterText:
        default: "Additional Footer text:"

Resources:
  SecurityHubRecurringSummarySNSTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      TopicName: "SecurityHubRecurringSummary"
      DisplayName: "Security Hub Summary Report"
      KmsMasterKeyId: "alias/aws/sns"
      Subscription:
        - Endpoint: { Ref: "EmailAddress" }
          Protocol: "email"
  SecurityHubSummaryEmailSchedule:
    Properties:
      Name: "SecurityHubSummaryEmailSchedule"
      Description: "Triggers the Recurring Security Hub summary email"
      ScheduleExpression: { Ref: "RecurringScheduleCron" }
      Targets:
        - Arn: { "Fn::GetAtt": ["SendSecurityHubSummaryEmailLambda", "Arn"] }
          Id: "1"
    Type: "AWS::Events::Rule"
  CloudWatchSchedulePermission:
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: { "Fn::GetAtt": ["SendSecurityHubSummaryEmailLambda", "Arn"] }
      Principal: "events.amazonaws.com"
      SourceArn: { "Fn::GetAtt": ["SecurityHubSummaryEmailSchedule", "Arn"] }
    Type: "AWS::Lambda::Permission"
  CustomInsightsLambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: ["lambda.amazonaws.com"]
            Action: ["sts:AssumeRole"]
      Policies:
        - PolicyName: "CreateSecurityHubInsights"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"]
                Resource: "arn:aws:logs:*:*:*"
              - Effect: "Allow"
                Action: ["securityhub:CreateInsight"]
                Resource: "*"
  SendEmailLambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: ["lambda.amazonaws.com"]
            Action: ["sts:AssumeRole"]
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSSecurityHubReadOnlyAccess"
      Policies:
        - PolicyName: "SecurityHubSendEmailToSNS"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "sns:Publish"
                Resource: { "Ref": "SecurityHubRecurringSummarySNSTopic" }
  CustomInsightsFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: >
          var response = require('cfn-response');
          exports.handler = function(event, context) {
              if (event.RequestType == 'Delete') {
                  response.send(event, context, response.SUCCESS);
                  return;
              }
              var AWS = require('aws-sdk');
              var responseData = {};
              var index = event.ResourceProperties.insightID;
              const securityhub = new AWS.SecurityHub();
              var params = [];
              params['0'] = {Name: 'Summary Email - 01 - AWS Foundational Security Best practices findings by compliance status',
              GroupByAttribute: 'ComplianceStatus',
              Filters: {Type:[{Value:'Software and Configuration Checks/Industry and Regulatory Standards/AWS-Foundational-Security-Best-Practices', Comparison:'EQUALS'}]
                ,WorkflowStatus:[{Value:'SUPPRESSED',Comparison:'NOT_EQUALS'}], RecordState:[{Value:'ACTIVE',Comparison:'EQUALS'}] }};
              // continue with other params
          };
      Handler: "index.handler"
      Runtime: "nodejs16.x"
      Timeout: "30"
      Role: { "Fn::GetAtt": ["CustomInsightsLambdaExecutionRole", "Arn"] }
  SendSecurityHubSummaryEmailLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: "SendSecurityHubSummaryEmail"
      Tags: []
      Code:
        S3Bucket: { "Ref": "S3BucketName" }
        S3Key: { "Ref": "S3KeyName" }
      Runtime: "python3.10"
      Handler: "index.lambda_handler"
      Timeout: "30"
      Environment:
        Variables:
          ARNInsight01: { "Fn::GetAtt": ["CreateInsights0", "ARN"] }
          ARNInsight02: { "Fn::GetAtt": ["CreateInsights1", "ARN"] }
          ARNInsight03: { "Fn::Get
